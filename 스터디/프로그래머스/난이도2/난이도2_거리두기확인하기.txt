import java.util.*;

class Solution {
    static class Pos{
        int x;
        int y;
        public Pos(int x, int y){
            this.x = x;
            this.y = y;
        }
    }//class Pos.
    
    public int[] solution(String[][] places) {
        char[][] map = new char[5][5];
        int[] answer = new int[5];
        int top = -1;
        
        for(String[] place : places){
            ArrayList<Pos> list = new ArrayList<Pos>();
            for(int i=0; i<5; i++){
                for(int j=0; j<5; j++){
                    map[i][j] = place[i].charAt(j);
                    if(map[i][j] == 'P') list.add(new Pos(i,j));
                }
            }//맵 만들고 시작.
            int check = 1;
ex1:        for(int i=0; i<list.size()-1; i++){
                for(int j=i+1; j<list.size(); j++){
                    Pos p1 = list.get(i);
                    Pos p2 = list.get(j);
                    int dist = Manhattan(p1,p2);
                    if(dist==1){
                        check = 0;
                        break ex1;
                    }//거리 1인경우 무조건 안됨.
                    else if(dist == 2){
                        if(p1.x == p2.x){
                            int my = (p1.y + p2.y)/2 ;
                            if(map[p1.x][my] == 'O'){
                                check = 0;
                                break ex1;
                            }
                        }//가로선에 있을경우.
                        else if(p1.y == p2.y){
                            int mx = (p1.x + p2.x)/2 ;
                            if(map[mx][p1.y] == 'O'){
                                check = 0;
                                break ex1;
                            }
                        }//세로선에 있을경우.
                        else{
                            if(map[p1.x][p2.y] == 'O' || map[p2.x][p1.y] == 'O'){
                                check = 0;
                                break ex1;
                            }
                        }
                    }//거리 2인경우 체크.
                }//end for2.
            }//end for1.
            answer[++top] = check;
        }//end for.
        return answer;
    }//end main.
    
    private int Manhattan(Pos p1, Pos p2){
        return Math.abs(p1.x-p2.x) + Math.abs(p1.y-p2.y);
    }//end Manhattan.
    
}//end solution.