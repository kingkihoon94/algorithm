function solution(board) {

    const getLineCnt = () => {
        let oCnt = 0;
        let xCnt = 0;

        for(let i=0; i<3; i++){
            if(board[i][0] === board[i][1] && board[i][1] === board[i][2]) {
                if(board[i][0] === 'O') {
                    oCnt++;
                } else if(board[i][0] === 'X') {
                    xCnt++;
                }
            }

            if(board[0][i] === board[1][i] && board[1][i] === board[2][i]) {
                if(board[0][i] === 'O') {
                    oCnt++;
                } else if(board[0][i] === 'X') {
                    xCnt++;
                }
            }
        }//end for1.

        if(board[0][0] === board[1][1] && board[1][1] === board[2][2]) {
            if(board[1][1] === 'O') {
                oCnt++;
            } else if(board[1][1] === 'X') {
                xCnt++;
            }
        }//end if.

        if(board[2][0] === board[1][1] && board[1][1] === board[0][2]) {
            if(board[1][1] === 'O') {
                oCnt++;
            } else if(board[1][1] === 'X') {
                xCnt++;
            }
        }//end if.

        return [oCnt, xCnt];
    }//end getLineCnt.

    let answer = 0;

    let count1 = 0;
    let count2 = 0;

    for(let i=0; i<3; i++) {
        for(let j=0; j<3; j++) {
            if(board[i][j] === 'O') count1++;
            if(board[i][j] === 'X') count2++;
        }
    }

    if (count1 - 1 === count2) {
        // O 의 갯수가 X 의 갯수보다 1개 더 많은 경우. > X 3연속만 없으면 있을 수 있는 수임.
        const lineCnt = getLineCnt();
        if(lineCnt[1] === 0) answer = 1;

    } else if(count1 === count2) {
        // O 의 갯수가 X 의 갯수랑 같은 경우. > O 3연속만 없으면 있을 수 있는 수임.
        const lineCnt = getLineCnt();
        if(lineCnt[0] === 0) answer = 1;
    }


    return answer;
}