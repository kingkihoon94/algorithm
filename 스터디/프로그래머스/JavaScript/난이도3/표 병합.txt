function solution(commands) {
    let array = Array.from({length:51}, () => new Array(51).fill("EMPTY"));

    let parentArray = Array.from({length:51}, () => new Array(51).fill(0));

    for(let i=0; i<=50; i++) {
        for(let j=0; j<=50; j++) {
            parentArray[i][j] = [i,j];
        }//end for2.
    }//end for1.

    const getParentPoint = (point) => {
        const parentPoint = parentArray[point[0]][point[1]];
        if(parentPoint[0] === point[0] && parentPoint[1] === point[1]) {
            return point;
        } else return getParentPoint(parentPoint);
    }//end getParentPoint;

    var answer = [];

    for(const command of commands) {
        const commandSplit = command.split(" ");
        if(commandSplit[0] === "UPDATE") {
            if(commandSplit.length === 4) {
                const [cmd, x, y, value] = commandSplit;
                const p = getParentPoint([Number(x),Number(y)]);
                array[p[0]][p[1]] = value;
            } else {
                const [cmd, value1, value2] = commandSplit;
                for(let i=0; i<=50; i++) {
                    for(let j=0; j<=50; j++) {
                        const p = getParentPoint([i,j]);
                        if(p[0] === i && p[1] === j && array[i][j] === value1) {
                            array[i][j] = value2;
                        }
                    }//end for3.
                }//end for2.
            }
        } else if(commandSplit[0] === "MERGE") {
            const [cmd, x1, y1, x2, y2] = commandSplit;

            if(x1===x2 && y1===y2) continue;

            const p1 = getParentPoint([Number(x1),Number(y1)]);
            const value1 = array[p1[0]][p1[1]];

            const p2 = getParentPoint([Number(x2),Number(y2)]);
            const value2 = array[p2[0]][p2[1]];

            if(p1[0] === p2[0] && p1[1] === p2[1]) continue;

            const targetArray = [];

            if(value1 === "EMPTY" && value2 !== "EMPTY") {
                for(let i=0; i<=50; i++) {
                    for(let j=0; j<=50; j++) {
                        const p3 = getParentPoint([i,j]);
                        if(p3[0] === p1[0] && p3[1] === p1[1]) {
                            targetArray.push([i,j]);
                        }
                    }
                }
                for(const [x,y] of targetArray) {
                    parentArray[x][y] = [p2[0] , p2[1]];
                }
            } else {
                for(let i=0; i<=50; i++) {
                    for(let j=0; j<=50; j++) {
                        const p3 = getParentPoint([i,j]);
                        if(p3[0] === p2[0] && p3[1] === p2[1]) {
                            targetArray.push([i,j]);
                        }
                    }
                }
                for(const [x,y] of targetArray) {
                    parentArray[x][y] = [p1[0] , p1[1]];
                }
            }
        } else if(commandSplit[0] === "UNMERGE") {
            const [cmd, x, y] = commandSplit;

            const p1 = getParentPoint([Number(x), Number(y)]);
            const value = array[p1[0]][p1[1]];

            for(let i=0; i<=50; i++) {
                for(let j=0; j<=50; j++) {
                    const p2 = getParentPoint([i,j]);
                    if(p1[0] === p2[0] && p1[1] === p2[1]) {
                        array[i][j] = "EMPTY";
                        parentArray[i][j] = [i,j];
                    }
                }
            }
            array[x][y] = value;
        } else {
            const [cmd, x, y] = commandSplit;
            const p = getParentPoint([Number(x), Number(y)]);
            answer.push(array[p[0]][p[1]]);
        }
    }//end for1.

    return answer;
}//end solution.