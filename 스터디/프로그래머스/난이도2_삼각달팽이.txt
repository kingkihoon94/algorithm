class Solution {
    public int[] solution(int n) {
        int max = getMax(n);
        int number = 1;
        int[][] map = new int[n][n];
        int dx = -1;
        int dy = 0;
        int direction = 0;
        while(number <= max){
            if(direction == 0){
                map[++dx][dy] = number++;
                if(dx+1 >= n || map[dx+1][dy] != 0) direction++;
            }//세로 움직임.
            else if(direction == 1){
                map[dx][++dy] = number++;
                if(dy+1 >= n || map[dx][dy+1] != 0) direction++;
            }//가로 움직임.
            else{
                map[--dx][--dy] = number++;
                if(map[dx-1][dy-1] != 0) direction = 0;
            }//대각선 움직임.
        }
        
        
        int[] answer = new int[max];
        int top = -1;
        for(int i=0; i<n; i++){
            for(int j=0; j<i+1; j++){
                answer[++top] = map[i][j];
            }
        }
        return answer;
    }//end main.
    private static int getMax(int num){
       return num == 1 ? 1 : getMax(num - 1) + num;
    }
}//end solution.