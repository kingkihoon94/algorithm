public class Solution {
    static int p;
    static int q;
    static int[][] map;
    static int row;
    static int col;
    
	public long solution(int[][] land, int P, int Q) {
        row = land.length;
        col = land[0].length;
        map = land;
        p = P;
        q = Q;
        
        long max = 0;
        long min = Long.MAX_VALUE;

        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                max = max < map[i][j] ? map[i][j] : max;
                min = min > map[i][j] ? map[i][j] : min;
            }//end for2.
        }//end for1.
        
        long answer = -1;
        
        while (min <= max){
            
            long mid = (min + max) / 2;                    
            long cost1 = get_price(mid);
            long cost2 = get_price(mid+1);  
            
            if(cost1 < cost2){                        
                answer = cost1;                
                max = mid-1;
            }
            
            else if(cost1 > cost2) {
                answer = cost2;                
                min = mid+1;
            }
            
            else {
                answer = cost1; 
                break;
            }
        }//end while.

        return answer;
	}//end main.
    
    private static long get_price(long height) {
        long cost = 0;
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(map[i][j] < height) cost += (height - map[i][j])*p;
                else if(map[i][j] > height) cost += (map[i][j] - height)*q;
            }
        }
        return cost;
    }//end get_price.
    
}//end solution.