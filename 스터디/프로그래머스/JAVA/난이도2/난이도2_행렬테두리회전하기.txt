class Solution {
    static int[][] map;
    public int[] solution(int rows, int columns, int[][] queries) {
        map = new int[rows+1][columns+1];
        for(int i=1; i<=rows; i++){
            for(int j=1; j<=columns; j++){
                map[i][j] = columns*(i-1) + j;
            }
        }//draw map.
        
        int[] answer = new int[queries.length];
        
        for(int i=0; i<queries.length; i++){
            answer[i] = rotate(queries[i]);
            System.out.println("");
        }
        
        return answer;
    }//end main.
    
    private int rotate(int[] query){
        
        int tmp = map[query[0]][query[1]];
        
        int min = Integer.MAX_VALUE;
        
        for(int dx = 1; dx <= query[2]-query[0]; dx++){
            map[query[0]+dx-1][query[1]] = map[query[0]+dx][query[1]];
            min = min > map[query[0]+dx][query[1]] ? map[query[0]+dx][query[1]] : min;
        }//왼쪽줄.
        for(int dy = 1; dy <= query[3]-query[1]; dy++){
            map[query[2]][query[1]+dy-1] = map[query[2]][query[1]+dy];
            min = min > map[query[2]][query[1]+dy] ? map[query[2]][query[1]+dy] : min;
        }//밑줄.
        for(int dx = 1; dx <= query[2]-query[0]; dx++){
            map[query[2]-dx+1][query[3]] = map[query[2]-dx][query[3]];
            min = min > map[query[2]-dx][query[3]] ? map[query[2]-dx][query[3]] : min;
        }//오른쪽줄.
        for(int dy = 1; dy <= query[3]-query[1]; dy++){
            map[query[0]][query[3]-dy+1] = map[query[0]][query[3]-dy];
            min = min > map[query[0]][query[3]-dy] ? map[query[0]][query[3]-dy] : min;
        }//윗줄.
        
        map[query[0]][query[1]+1] = tmp;
        min = min > tmp ? tmp : min ;
        
        return min;
    }//end rotate.
    
}//end solution.